# Hands-on 1: Spring Data JPA – Quick Example

## Project Name

**orm-learn**

## Objective

To create a Spring Boot project using Spring Data JPA and Hibernate that connects to a MySQL database and performs basic operations.

---

## Software Prerequisites

- MySQL Server 8.0
- MySQL Workbench 8
- Eclipse IDE for Enterprise Java Developers (2019-03 R)
- Maven 3.6.2

---

## Project Setup

### 1. Project Creation

- Project initialized using [Spring Initializr](https://start.spring.io/)
- Group: `com.cognizant`
- Artifact: `orm-learn`
- Description: `Demo project for Spring Data JPA and Hibernate`
- Dependencies selected:
  - Spring Boot DevTools
  - Spring Data JPA
  - MySQL Driver

### 2. Project Import

- Extracted the ZIP to Eclipse workspace
- Imported using: `File > Import > Maven > Existing Maven Projects`

### 3. Database Setup

- Created schema `ormlearn` in MySQL:

```sql
mysql -u root -p
create schema ormlearn;
Configuration
src/main/resources/application.properties
properties
# Logging
logging.level.org.springframework=info
logging.level.com.cognizant=debug
logging.level.org.hibernate.SQL=trace
logging.level.org.hibernate.type.descriptor.sql=trace

# Console log format
logging.pattern.console=%d{dd-MM-yy} %d{HH:mm:ss.SSS} %-20.20thread %5p %-25.25logger{25} %25M %4L %m%n

# MySQL Database connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/ormlearn
spring.datasource.username=root
spring.datasource.password=root

# Hibernate
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
Entity Creation
com.cognizant.ormlearn.model.Country

@Entity
@Table(name = "country")
public class Country {
    
    @Id
    @Column(name = "code")
    private String code;

    @Column(name = "name")
    private String name;

    // Getters, setters, and toString()
}
Table created in MySQL:

create table country(co_code varchar(2) primary key, co_name varchar(50));
insert into country values ('IN', 'India');
insert into country values ('US', 'United States of America');
Repository Interface
com.cognizant.ormlearn.repository.CountryRepository

@Repository
public interface CountryRepository extends JpaRepository<Country, String> {
}
Service Class
com.cognizant.ormlearn.service.CountryService

@Service
public class CountryService {

    @Autowired
    private CountryRepository countryRepository;

    @Transactional
    public List<Country> getAllCountries() {
        return countryRepository.findAll();
    }
}
Application Class
OrmLearnApplication.java

@SpringBootApplication
public class OrmLearnApplication {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrmLearnApplication.class);
    private static CountryService countryService;

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(OrmLearnApplication.class, args);
        LOGGER.info("Inside main");
        countryService = context.getBean(CountryService.class);
        testGetAllCountries();
    }

    private static void testGetAllCountries() {
        LOGGER.info("Start");
        List<Country> countries = countryService.getAllCountries();
        LOGGER.debug("countries={}", countries);
        LOGGER.info("End");
    }
}
Maven Build
Use the following command to build the project via command line:

mvn clean package \
  -Dhttp.proxyHost=proxy.cognizant.com \
  -Dhttp.proxyPort=6050 \
  -Dhttps.proxyHost=proxy.cognizant.com \
  -Dhttps.proxyPort=6050 \
  -Dhttp.proxyUser=123456


Final File Structure

orm-learn/
├── pom.xml
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── cognizant/
│   │   │           └── ormlearn/
│   │   │               ├── OrmLearnApplication.java
│   │   │               ├── model/
│   │   │               │   └── Country.java
│   │   │               ├── repository/
│   │   │               │   └── CountryRepository.java
│   │   │               └── service/
│   │   │                   └── CountryService.java
│   └── resources/
│       └── application.properties
└── README.md
